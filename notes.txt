
# DATABASE CONFIGURATION


# db_dev = os.getenv("HOST_MODE")
# if db_dev == "development":
#     app.config["SQLALCHEMY_DATABASE_URI"] = "{}://{}:{}@{}:{}/{}".format(
#         db_config["development"]["db_type"],
#         db_config["development"]["username"],
#         db_config["development"]["password"],
#         db_config["development"]["host"],
#         db_config["development"]["port"],
#         db_config["development"]["database"],
#     )

# elif db_dev == "production":

#     app.config["SQLALCHEMY_DATABASE_URI"] = "{}://{}:{}@{}:{}/{}".format(
#         db_config["production"]["db_type"],
#         db_config["production"]["username"],
#         db_config["production"]["password"],
#         db_config["production"]["host"],
#         db_config["production"]["port"],
#         db_config["production"]["database"],
#     )

# app.config[
#     "SQLALCHEMY_DATABASE_URI"
# ] = "postgres://rqjlcbouwdptml:140d296ff6a2103213affa9eaeaa8b3f2d24cb15c1b9a321ce77277db35bca55@ec2-54-197-238-238.compute-1.amazonaws.com:5432/da3kp68t3m2lui"

# app.config[
#         "SQLALCHEMY_DATABASE_URI"
#     ] = "psql://kamseupai:kampungantapisukses@localhost/monolitik"

# else:
#     app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///" + basedir




LOGIN DAN REGISTER BERSATU 

# @auth.route("/google-auth", methods=["POST", "GET"])
# def google_auth():
#     """
#     menambahkan google auth pada aplikasi kamseupai. jadi user bisa
#     registrasi ataupun log in dengan menggunakan akun googlenya masing
#     masing. hal ini akan menjadi lebih mudah
#     """

#     # try:
#     if not google.authorized:
#         return redirect(url_for("google.login"))

#     resp = google.get("/oauth2/v1/userinfo")
#     email = str(resp.json()["email"])
#     username = str(resp.json()["name"])
#     password = str(resp.json()["family_name"])
#     user_picture = str(resp.json()["picture"])
#     user_google_id = str(resp.json()["id"])
#     session["user_id"] = user_google_id
#     """
#     cek terlebih dahulu apakah user email pada google auth sudah didaftarkan atau belum.
#     jika sudah ada, maka hanya login biasa tanpa melakukan penulisan data ke dalam db. jika
#     belum ada, maka ambil data / info dari google auth lalu tulis ke dalam db.
#     """
#     print("RESPONSE DATA %s" % resp.json())
#     if resp.json()["email"] in [data.email for data in models.User.query.all()]:
#         # print("email google sudah ada dan siap untuk login")
#         # user = models.User.query.filter_by(username=username).first()
#         # # memasukan foto profile dari api google auth dengan membuat session
#         # session["user_picture"] = user_picture
#         # login_user(user)  # masukan user ke dalam login manager nya
#         # next = request.args.get("next")
#         # if next == None or not next[0] == "/":
#         #     next = url_for("home.index")
#         # return redirect(next)
#         return "EMAIL GOOLE SUDAH ADA DAN SIAP LOGIN"
#     else:
#         print("email google tidak tersedia, sehingga regist automatis")
#         print(resp.json())
#         # print(resp.json())
#         # # assert resp.ok, resp.text
#         # session["user_picture"] = user_picture
#         # user_google = models.User(email=email, username=username, password=password)
#         # models.db.session.add(user_google)
#         # models.db.session.commit()
#         # user_detail = models.UserDetail(
#         #     id_user=user_google_id, foto_user=session["user_picture"]
#         # )
#         # models.db.session.add(user_detail)
#         # models.db.session.commit()
#         # user = models.User.query.filter_by(username=username).first()

#         # login_user(user)
#         # next = request.args.get("next")
#         # if next == None or not next[0] == "/":
#         #     next = url_for("home.index")
#         # return redirect(next)
#         return resp.json()
#     # except:
#     #     return redirect(url_for("google.login"))


# OTHER DATABASE CONFIGURATION
db_config = {
    "production": {
        "db_type": "postgresql",
        "username": "rqjlcbouwdptml",
        "password": "140d296ff6a2103213affa9eaeaa8b3f2d24cb15c1b9a321ce77277db35bca55",
        "host": "ec2-54-197-238-238.compute-1.amazonaws.com",
        "port": "5432",
        "database": "da3kp68t3m2lui",
    },
    "development": {
        "db_type": "mysql",
        "username": "root",
        "password": "2911",
        "host": "localhost",
        "port": "5432",
        "database": "kamseupai",
    },
    "stagging": {
        "db_type": "postgresql",
        "username": "admin",
        "password": "admin",
        "host": "localhost",
        "port": "5432",
        "database": "kamseupai",
    },
}